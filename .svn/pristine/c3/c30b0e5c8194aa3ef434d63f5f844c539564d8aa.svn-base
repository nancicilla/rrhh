<?php
/*
 * Planillaretroactivo.php
 *
 * Version 0.$Rev: 244 $
 *
 * Creacion: 08/02/2022
 *
 * Ultima Actualizacion: $Date: 2015-03-17 10:26:19 -0400 (mar, 17 mar 2015) $:
 * 
 * Copyright 2015 SOLUR SRL.
 * Monteagudo esq. Los Sauces, Sucre, Bolivia.
 * Todos los derechos reservados.
 *
 * Este software es información confidencial y de propiedad de SOLUR SRL.
 * Usted no podrá divulgar dicha Información Confidencial y la utilizará 
 * únicamente de acuerdo con los términos del acuerdo de licencia con SOLUR SRL.
 
 * This is the model class for table "planillaretroactivo".
 *
 * The followings are the available columns in table 'planillaretroactivo':
 * @property integer $id
 * @property integer $mesincio
 * @property integer $mesfin
 * @property integer $anio
 * @property string $monto
 * @property string $porcentaje
 * @property string $usuario
 * @property string $fecha
 * @property boolean $eliminado
 */
class Planillaretroactivo extends CActiveRecord
{
    /**
     * Crea un ámbito por defecto que permite añadir condiciones al modelo
     */
    public $tipocontrato,$empresa;
    public function defaultScope() {
        return array(
            'condition' => $this->getTableAlias(false, false) .
            '.eliminado = false',
        );
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
            return 'planillaretroactivo';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
            // NOTE: you should only define rules for those attributes that
            // will receive user inputs.
            return array(
                    array('mesinicio, mesfin, anio', 'numerical', 'integerOnly'=>true),
                    array('monto, porcentaje', 'length', 'max'=>12),
                    array('usuario', 'length', 'max'=>30),
                    array('fecha,mesi,mesf, eliminado', 'safe'),
                    array('mesinicio,porsistema,conprefactura, mesfin,monto,porcentaje', 'required', 'on' => array('insert', 'update')),
                   
                    // The following rule is used by search().
                    // @todo Please remove those attributes that should not be searched.
                    array('id, mesinicio ,conprefactura, mesfin,mesi,mesf, anio, monto, porcentaje, usuario, fecha, eliminado', 'safe', 'on'=>'search'),
            );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
            // NOTE: you may need to adjust the relation name and the related
            // class name for the relations automatically generated below.
            return array(
            );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
            return array(
                    'id' => 'ID',
                    'mesinicio' => 'Mes Inicio',
                    'mesfin' => 'Mes Fin',
                    'anio' => 'Anio',
                    'fechapago'=>'Fecha Pago',
                    'monto' => 'Nuevo Minimo Nacional (Bs.)',
                    'porcentaje' => 'Porcentaje Incremento Haber Básico (%)',
                    'usuario' => 'Usuario',
                    'fecha' => 'Fecha',
                    'eliminado' => 'Eliminado'
                
                
            );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
            // @todo Please modify the following code to remove attributes that should not be searched.

            $criteria=new CDbCriteria;

		$criteria->compare('t.id',$this->id);
		//$criteria->compare('t.mesinicio',$this->mesinicio);
                
		$criteria->compare('t.anio',$this->anio);
                if ($this->monto!=Null && floatval($this->monto)>0 ) {
                    $criteria->addSearchCondition('t.monto::text',$this->monto,true,'AND','ILIKE');              
                    }
                if ($this->porcentaje!=Null && floatval($this->porcentaje)>0 ) {
                    $criteria->addSearchCondition('t.porcentaje::text',$this->monto,true,'AND','ILIKE');              
                    }
                
		$criteria->addSearchCondition('t.usuario',$this->usuario,true,'AND','ILIKE');
		 if ($this->fecha != Null) {
		$criteria->addCondition("t.fecha::date = '" . $this->fecha. "'");
		 }

            return new CActiveDataProvider($this, array(
                    'pagination'=>array(
                        'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),
                    ), 
                    'criteria'=>$criteria, 'sort' => array(
                        'defaultOrder' => 't.id desc ', 
                   )
            ));
    }

    /**
     * @return CDbConnection the database connection used for this class
     */
    public function getDbConnection()
    {
            return Yii::app()->rrhh;
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Planillaretroactivo the static model class
     */
    public static function model($className=__CLASS__)
    {
            return parent::model($className);
    }


    /**
     *
     * Sentencias entes de ejecutar metodo save
     * Antes de guardar se cambia todos los campos  de tipo character
     * varying y text a mayúsculas
     * Si existe el campo fecha, este toma el valor de la fecha actual antes
     * de almacenarse
     * Si existe el campo usuario, toma el valor del usuario actual antes de
     * almacenarse
     * 
     */
    public function beforeSave() {
		$this->usuario= Yii::app()->user->getName();
		$this->fecha= new CDbExpression('NOW()');
        return parent::beforeSave();            
    }
    /**
     * 
     * @param integer $mes, numero del mes , valores del 1 al 12
     * @return string, nombre del mes
     */
    public function dameNombreMes($mes) {
        switch ($mes){
            case 1:return 'Enero' ;break;
            case 2:return 'Febrero' ;break;
            case 3:return 'Marzo' ;break;
            case 4:return 'Abril' ;break;
            case 5:return 'Mayo' ;break;
            case 6:return 'Junio' ;break;
            case 7:return 'Julio' ;break;
            case 8:return 'Agosto' ;break;
            case 9:return 'Septiembre' ;break;
            case 10:return 'Octubre' ;break;
            case 11:return 'Noviembre' ;break;
            default : return 'Diciembre' ;break;
            
            
        }
    }
   /**
    * 
    * @return array, id y nombre del mes menores al mes Actual del Sistema
    */
    public function listaMes() {
        $mesactual=date('m');
        $lista=array();
        for($i=1;$i<$mesactual;$i++){
            $nombre=$this->dameNombreMes($i);
            $lista[]=array('id'=>$i,'nombre'=>$nombre);
            
        }
        return $lista;
    }
    /**
     * Consolida el Retroactivo
     * @param integer $idretroactivo, id del Retroactivo
     * @param date $fechapago, fecha de pago del Retroactivo
     */
    public function ConsolidarPlanilla($idretroactivo, $fechapago) {
        $usuario=Yii::app()->user->getName();
        Yii::app()->contabilidad
            ->createCommand("select registrar_asientos_retroactivo('$usuario')  ")
            ->execute();
         Yii::app()->rrhh
            ->createCommand("select   actualizar_haberbasico_retroactivo('$usuario')  ")
            ->execute();
         Yii::app()->rrhh
            ->createCommand("update planillaretroactivo set fechapago='$fechapago',usuario='$usuario' where id=$idretroactivo  ;")
            ->execute();
    }
    /**
     * Consolida el Asiento de Prefactura del Retroactivo
     * @param integer $idretroactivo, id del Retroactivo
     */
    public function ConsolidarPrefactura($idretroactivo) {
         $usuario=Yii::app()->user->getName();
         Yii::app()->contabilidad
            ->createCommand("select generar_asiento_prefacturaretroactivo($idretroactivo,'$usuario')  ")
            ->execute();
        
    }


}
